Elm.FibonacciBars = Elm.FibonacciBars || {};
Elm.FibonacciBars.make = function (_elm) {
   "use strict";
   _elm.FibonacciBars = _elm.FibonacciBars || {};
   if (_elm.FibonacciBars.values) return _elm.FibonacciBars.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Fibonacci = Elm.Fibonacci.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var color = function (n) {
      var colors = _U.list([$Color.red
                           ,$Color.orange
                           ,$Color.yellow
                           ,$Color.green
                           ,$Color.blue
                           ,$Color.purple
                           ,$Color.brown]);
      return A2($Maybe.withDefault,
      $Color.red,
      $List.head(A2($List.drop,
      A2($Basics._op["%"],n,$List.length(colors)),
      colors)));
   };
   var bar = function (_p0) {
      var _p1 = _p0;
      var _p2 = _p1._1;
      return A2($Graphics$Element.flow,
      $Graphics$Element.up,
      _U.list([A3($Graphics$Collage.collage,
              20,
              _p2 * 20,
              _U.list([A2($Graphics$Collage.filled,
              color(_p1._0),
              A2($Graphics$Collage.rect,20,$Basics.toFloat(_p2) * 20))]))
              ,$Graphics$Element.show(_p2)]));
   };
   var main = A2($Graphics$Element.flow,
   $Graphics$Element.right,
   A2($List.map,bar,$Fibonacci.fibonacciWithIndexes(10)));
   return _elm.FibonacciBars.values = {_op: _op
                                      ,color: color
                                      ,bar: bar
                                      ,main: main};
};